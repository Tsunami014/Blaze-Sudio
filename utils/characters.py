import os
try:
    from utils.discussions import *
except ImportError:
    from discussions import *

class Character:
    def __init__(self, AI, name, personality, start=1):
        """
        A Character, with its own personality and everything and stuff

        Parameters
        ----------
        AI : AI (Any AI class in AIs.py)
            The AI this uses. Can be a multiAI, makes no difference.
        name : str
            The name of the character. For basic conversations (like the normal chatGPT), this could be 'user' or 'assistant' or something.
            For more advanced conversations, this could be 'Grapefruit' or whatnot. Yeah, you get it, right?
        personality : str # I don't know that to do about this, would it be a string? What about summarisation?
            The Personality of the character. Describe who the character is.
        start : int
            The starting text to use. THIS MAKES ALL THE DIFFERENCE!
            See `doc/character start.md` for more info.
        """
        self.AI = AI
        self.name = str(name) # just in case someone's an idiot (not me, but someone else)
        self.personality = personality
        self.memory = [] # of important events, may not actually be a list, can change, can delete if needed
        path = os.getcwd()[:os.getcwd().index('AIHub')+len('AIHub')]
        self.discus = DiscussionsDB(path+'\\data\\'+self.name+'_database.db') # Would it be a dict? Can change
        self.discus.populate()
        self.current_discussion = self.discus.create_discussion()
        # for things like current conversations or what the character is doing, use self.currents
        # TODO: How to summarise the personality????? Maybe it uses an online AI in the background if it's avaliable and stores the result?? Who knows.
        # Maybe new personality class??
    
    # TODO: When game engine comes into existance, make a gradual response, and a wait until it is time to butt in, and a gradual speak
    def __call__(self, who, print=False):
        """
        This character has said [message] to [who]
        the [message] will be generated by the bot. Or if it is a user bot it will have user input.

        Parameters
        ----------
        who : Character, 
              iterable[Character,], 
              TODO: dict{Character: str(what message that character heard, use for things like the characters playing chinese whispers or spying)}
            The character(s) that heard the message.
        print : bool
            Whether or not to print the result, by default False
        """
        # TODO: update now to include the fact that it streams the results
        self.AI(self.current_discussion.get_messages())
        message = self.AI.resp
        if isinstance(who, dict):
            pass
        elif isinstance(who, Character):
            resp = who.got_told(message, self)
            self.current_discussion.add_message(who.name, resp)
            print(who.name, ':', resp)
        else: #assume it is an iterable
            for character in who:
                resp = character.got_told(message, self)
                self.current_discussion.add_message(character.name, resp)
                print(character.name, ':', resp)
    
    def still_generating(self):
        return self.AI.still_generating()
    
    def __str__(self):
        return self.name
    
    def got_told(self, message, from_who):
        # TODO: update now due to the streaming changes
        self.current_discussion.add_message(str(from_who), message)
        resp = self.AI(self.current_discussion.get_messages())
        self.current_discussion.add_message(self.name, resp)
        return resp

    def get_messages(self):
        """Gets a list of messages information

        Returns:
            list: List of entries in the format {"id":message id, "sender":sender name, "content":message content, "type":message type, "rank": message rank}
        """
        return self.current_discussion.get_messages()
    
    def message_rank_up(self, message_id):
        """Increments the rank of the message

        Args:
            message_id (int): The id of the message to be changed
        """
        return self.current_discussion.message_rank_up(message_id)

    def message_rank_down(self, message_id):
        """Increments the rank of the message

        Args:
            message_id (int): The id of the message to be changed
        """
        return self.current_discussion.message_rank_down(message_id)
    
    def new_discussion(self):
        self.current_discussion = self.discus.create_discussion()
    
    def should_interrupt(self, said, who):
        id = self.current_discussion.add_message(str(who), said)
        out = self.AI.should_interrupt(self.current_discussion.get_messages())
        self.current_discussion.delete_message(id)
        return out
