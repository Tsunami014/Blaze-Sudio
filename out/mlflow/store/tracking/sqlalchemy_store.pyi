from _typeshed import Incomplete
from mlflow.entities import Experiment as Experiment, RunStatus as RunStatus, RunTag as RunTag, SourceType as SourceType, ViewType as ViewType
from mlflow.entities.lifecycle_stage import LifecycleStage as LifecycleStage
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.protos.databricks_pb2 import INTERNAL_ERROR as INTERNAL_ERROR, INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE, INVALID_STATE as INVALID_STATE, RESOURCE_ALREADY_EXISTS as RESOURCE_ALREADY_EXISTS, RESOURCE_DOES_NOT_EXIST as RESOURCE_DOES_NOT_EXIST
from mlflow.store.db.base_sql_model import Base as Base
from mlflow.store.db.db_types import MSSQL as MSSQL, MYSQL as MYSQL
from mlflow.store.entities.paged_list import PagedList as PagedList
from mlflow.store.tracking import SEARCH_MAX_RESULTS_DEFAULT as SEARCH_MAX_RESULTS_DEFAULT, SEARCH_MAX_RESULTS_THRESHOLD as SEARCH_MAX_RESULTS_THRESHOLD
from mlflow.store.tracking.abstract_store import AbstractStore as AbstractStore
from mlflow.store.tracking.dbmodels.models import SqlExperiment as SqlExperiment, SqlExperimentTag as SqlExperimentTag, SqlLatestMetric as SqlLatestMetric, SqlMetric as SqlMetric, SqlParam as SqlParam, SqlRun as SqlRun, SqlTag as SqlTag
from mlflow.utils.file_utils import local_file_uri_to_path as local_file_uri_to_path, mkdir as mkdir
from mlflow.utils.mlflow_tags import MLFLOW_LOGGED_MODELS as MLFLOW_LOGGED_MODELS, MLFLOW_RUN_NAME as MLFLOW_RUN_NAME
from mlflow.utils.search_utils import SearchExperimentsUtils as SearchExperimentsUtils, SearchUtils as SearchUtils
from mlflow.utils.string_utils import is_string_type as is_string_type
from mlflow.utils.time_utils import get_current_time_millis as get_current_time_millis
from mlflow.utils.uri import append_to_uri_path as append_to_uri_path, extract_db_type_from_uri as extract_db_type_from_uri, is_local_uri as is_local_uri

class SqlAlchemyStore(AbstractStore):
    ARTIFACTS_FOLDER_NAME: str
    DEFAULT_EXPERIMENT_ID: str
    db_uri: Incomplete
    db_type: Incomplete
    artifact_root_uri: Incomplete
    engine: Incomplete
    ManagedSessionMaker: Incomplete
    def __init__(self, db_uri, default_artifact_root) -> None: ...
    def create_experiment(self, name, artifact_location: Incomplete | None = None, tags: Incomplete | None = None): ...
    def list_experiments(self, view_type=..., max_results: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def search_experiments(self, view_type=..., max_results=..., filter_string: Incomplete | None = None, order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def get_experiment(self, experiment_id): ...
    def get_experiment_by_name(self, experiment_name): ...
    def delete_experiment(self, experiment_id) -> None: ...
    def restore_experiment(self, experiment_id) -> None: ...
    def rename_experiment(self, experiment_id, new_name) -> None: ...
    def create_run(self, experiment_id, user_id, start_time, tags, run_name): ...
    def update_run_info(self, run_id, run_status, end_time, run_name): ...
    def get_run(self, run_id): ...
    def restore_run(self, run_id) -> None: ...
    def delete_run(self, run_id) -> None: ...
    def log_metric(self, run_id, metric) -> None: ...
    def get_metric_history(self, run_id, metric_key): ...
    def log_param(self, run_id, param) -> None: ...
    def set_experiment_tag(self, experiment_id, tag) -> None: ...
    def set_tag(self, run_id, tag) -> None: ...
    def delete_tag(self, run_id, key) -> None: ...
    def log_batch(self, run_id, metrics, params, tags) -> None: ...
    def record_logged_model(self, run_id, mlflow_model) -> None: ...
