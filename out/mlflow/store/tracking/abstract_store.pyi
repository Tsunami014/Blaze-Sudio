import abc
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from mlflow.entities import ViewType as ViewType
from mlflow.store.entities.paged_list import PagedList as PagedList
from mlflow.store.tracking import SEARCH_MAX_RESULTS_DEFAULT as SEARCH_MAX_RESULTS_DEFAULT

class AbstractStore(metaclass=abc.ABCMeta):
    __metaclass__ = ABCMeta
    def __init__(self) -> None: ...
    @abstractmethod
    def list_experiments(self, view_type=..., max_results: Incomplete | None = None, page_token: Incomplete | None = None): ...
    @abstractmethod
    def search_experiments(self, view_type=..., max_results=..., filter_string: Incomplete | None = None, order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    @abstractmethod
    def create_experiment(self, name, artifact_location, tags): ...
    @abstractmethod
    def get_experiment(self, experiment_id): ...
    def get_experiment_by_name(self, experiment_name): ...
    @abstractmethod
    def delete_experiment(self, experiment_id): ...
    @abstractmethod
    def restore_experiment(self, experiment_id): ...
    @abstractmethod
    def rename_experiment(self, experiment_id, new_name): ...
    @abstractmethod
    def get_run(self, run_id): ...
    @abstractmethod
    def update_run_info(self, run_id, run_status, end_time, run_name): ...
    @abstractmethod
    def create_run(self, experiment_id, user_id, start_time, tags, run_name): ...
    @abstractmethod
    def delete_run(self, run_id): ...
    @abstractmethod
    def restore_run(self, run_id): ...
    def log_metric(self, run_id, metric) -> None: ...
    def log_param(self, run_id, param) -> None: ...
    def set_experiment_tag(self, experiment_id, tag) -> None: ...
    def set_tag(self, run_id, tag) -> None: ...
    @abstractmethod
    def get_metric_history(self, run_id, metric_key): ...
    def search_runs(self, experiment_ids, filter_string, run_view_type, max_results=..., order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def list_run_infos(self, experiment_id, run_view_type, max_results=..., order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    @abstractmethod
    def log_batch(self, run_id, metrics, params, tags): ...
    @abstractmethod
    def record_logged_model(self, run_id, mlflow_model): ...
