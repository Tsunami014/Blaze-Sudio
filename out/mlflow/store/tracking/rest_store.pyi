from _typeshed import Incomplete
from mlflow.entities import Experiment as Experiment, Metric as Metric, Run as Run, RunInfo as RunInfo, ViewType as ViewType
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.protos import databricks_pb2 as databricks_pb2
from mlflow.protos.service_pb2 import CreateExperiment as CreateExperiment, CreateRun as CreateRun, DeleteExperiment as DeleteExperiment, DeleteRun as DeleteRun, DeleteTag as DeleteTag, GetExperiment as GetExperiment, GetExperimentByName as GetExperimentByName, GetMetricHistory as GetMetricHistory, GetRun as GetRun, ListExperiments as ListExperiments, LogBatch as LogBatch, LogMetric as LogMetric, LogModel as LogModel, LogParam as LogParam, MlflowService as MlflowService, RestoreExperiment as RestoreExperiment, RestoreRun as RestoreRun, SearchExperiments as SearchExperiments, SearchRuns as SearchRuns, SetExperimentTag as SetExperimentTag, SetTag as SetTag, UpdateExperiment as UpdateExperiment, UpdateRun as UpdateRun
from mlflow.store.entities.paged_list import PagedList as PagedList
from mlflow.store.tracking.abstract_store import AbstractStore as AbstractStore
from mlflow.utils.proto_json_utils import message_to_json as message_to_json
from mlflow.utils.rest_utils import call_endpoint as call_endpoint, extract_api_info_for_service as extract_api_info_for_service

class RestStore(AbstractStore):
    get_host_creds: Incomplete
    def __init__(self, get_host_creds) -> None: ...
    def list_experiments(self, view_type=..., max_results: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def search_experiments(self, view_type=..., max_results: Incomplete | None = None, filter_string: Incomplete | None = None, order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def create_experiment(self, name, artifact_location: Incomplete | None = None, tags: Incomplete | None = None): ...
    def get_experiment(self, experiment_id): ...
    def delete_experiment(self, experiment_id) -> None: ...
    def restore_experiment(self, experiment_id) -> None: ...
    def rename_experiment(self, experiment_id, new_name) -> None: ...
    def get_run(self, run_id): ...
    def update_run_info(self, run_id, run_status, end_time, run_name): ...
    def create_run(self, experiment_id, user_id, start_time, tags, run_name): ...
    def log_metric(self, run_id, metric) -> None: ...
    def log_param(self, run_id, param) -> None: ...
    def set_experiment_tag(self, experiment_id, tag) -> None: ...
    def set_tag(self, run_id, tag) -> None: ...
    def delete_tag(self, run_id, key) -> None: ...
    def get_metric_history(self, run_id, metric_key): ...
    def delete_run(self, run_id) -> None: ...
    def restore_run(self, run_id) -> None: ...
    def get_experiment_by_name(self, experiment_name): ...
    def log_batch(self, run_id, metrics, params, tags) -> None: ...
    def record_logged_model(self, run_id, mlflow_model) -> None: ...

class DatabricksRestStore(RestStore):
    def get_experiment_by_name(self, experiment_name): ...
