from _typeshed import Incomplete
from mlflow.entities import Experiment as Experiment, ExperimentTag as ExperimentTag, Metric as Metric, Param as Param, Run as Run, RunData as RunData, RunInfo as RunInfo, RunStatus as RunStatus, RunTag as RunTag, SourceType as SourceType, ViewType as ViewType
from mlflow.entities.lifecycle_stage import LifecycleStage as LifecycleStage
from mlflow.entities.run_info import check_run_is_active as check_run_is_active
from mlflow.exceptions import MissingConfigException as MissingConfigException, MlflowException as MlflowException
from mlflow.protos import databricks_pb2 as databricks_pb2
from mlflow.protos.databricks_pb2 import INTERNAL_ERROR as INTERNAL_ERROR, INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE, RESOURCE_DOES_NOT_EXIST as RESOURCE_DOES_NOT_EXIST
from mlflow.store.entities.paged_list import PagedList as PagedList
from mlflow.store.tracking import DEFAULT_LOCAL_FILE_AND_ARTIFACT_PATH as DEFAULT_LOCAL_FILE_AND_ARTIFACT_PATH, SEARCH_MAX_RESULTS_DEFAULT as SEARCH_MAX_RESULTS_DEFAULT, SEARCH_MAX_RESULTS_THRESHOLD as SEARCH_MAX_RESULTS_THRESHOLD
from mlflow.store.tracking.abstract_store import AbstractStore as AbstractStore
from mlflow.utils.env import get_env as get_env
from mlflow.utils.file_utils import append_to as append_to, exists as exists, find as find, get_parent_dir as get_parent_dir, is_directory as is_directory, list_all as list_all, list_subdirs as list_subdirs, local_file_uri_to_path as local_file_uri_to_path, make_containing_dirs as make_containing_dirs, mkdir as mkdir, mv as mv, path_to_local_file_uri as path_to_local_file_uri, read_file as read_file, read_file_lines as read_file_lines, read_yaml as read_yaml, write_to as write_to, write_yaml as write_yaml
from mlflow.utils.mlflow_tags import MLFLOW_LOGGED_MODELS as MLFLOW_LOGGED_MODELS, MLFLOW_RUN_NAME as MLFLOW_RUN_NAME
from mlflow.utils.search_utils import SearchExperimentsUtils as SearchExperimentsUtils, SearchUtils as SearchUtils
from mlflow.utils.string_utils import is_string_type as is_string_type
from mlflow.utils.time_utils import get_current_time_millis as get_current_time_millis
from mlflow.utils.uri import append_to_uri_path as append_to_uri_path

class FileStore(AbstractStore):
    TRASH_FOLDER_NAME: str
    ARTIFACTS_FOLDER_NAME: str
    METRICS_FOLDER_NAME: str
    PARAMS_FOLDER_NAME: str
    TAGS_FOLDER_NAME: str
    EXPERIMENT_TAGS_FOLDER_NAME: str
    RESERVED_EXPERIMENT_FOLDERS: Incomplete
    META_DATA_FILE_NAME: str
    DEFAULT_EXPERIMENT_ID: str
    root_directory: Incomplete
    artifact_root_uri: Incomplete
    trash_folder: Incomplete
    def __init__(self, root_directory: Incomplete | None = None, artifact_root_uri: Incomplete | None = None) -> None: ...
    def list_experiments(self, view_type=..., max_results: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def search_experiments(self, view_type=..., max_results=..., filter_string: Incomplete | None = None, order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def create_experiment(self, name, artifact_location: Incomplete | None = None, tags: Incomplete | None = None): ...
    def get_experiment(self, experiment_id): ...
    def delete_experiment(self, experiment_id) -> None: ...
    def restore_experiment(self, experiment_id) -> None: ...
    def rename_experiment(self, experiment_id, new_name) -> None: ...
    def delete_run(self, run_id) -> None: ...
    def restore_run(self, run_id) -> None: ...
    def update_run_info(self, run_id, run_status, end_time, run_name): ...
    def create_run(self, experiment_id, user_id, start_time, tags, run_name): ...
    def get_run(self, run_id): ...
    def get_all_metrics(self, run_uuid): ...
    def get_metric_history(self, run_id, metric_key): ...
    def get_all_params(self, run_uuid): ...
    def get_all_experiment_tags(self, exp_id): ...
    def get_all_tags(self, run_uuid): ...
    def log_metric(self, run_id, metric) -> None: ...
    def log_param(self, run_id, param) -> None: ...
    def set_experiment_tag(self, experiment_id, tag) -> None: ...
    def set_tag(self, run_id, tag) -> None: ...
    def delete_tag(self, run_id, key) -> None: ...
    def log_batch(self, run_id, metrics, params, tags) -> None: ...
    def record_logged_model(self, run_id, mlflow_model) -> None: ...
