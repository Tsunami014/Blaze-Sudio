import abc
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE, RESOURCE_DOES_NOT_EXIST as RESOURCE_DOES_NOT_EXIST
from mlflow.utils.validation import bad_path_message as bad_path_message, path_not_unique as path_not_unique

class ArtifactRepository(metaclass=abc.ABCMeta):
    __metaclass__ = ABCMeta
    artifact_uri: Incomplete
    thread_pool: Incomplete
    def __init__(self, artifact_uri) -> None: ...
    @abstractmethod
    def log_artifact(self, local_file, artifact_path: Incomplete | None = None): ...
    @abstractmethod
    def log_artifacts(self, local_dir, artifact_path: Incomplete | None = None): ...
    @abstractmethod
    def list_artifacts(self, path): ...
    def download_artifacts(self, artifact_path, dst_path: Incomplete | None = None): ...
    def delete_artifacts(self, artifact_path: Incomplete | None = None) -> None: ...
    @property
    def max_workers(self) -> int: ...

def verify_artifact_path(artifact_path) -> None: ...
