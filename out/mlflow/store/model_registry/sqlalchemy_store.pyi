from _typeshed import Incomplete
from mlflow.entities.model_registry.model_version_stages import ALL_STAGES as ALL_STAGES, DEFAULT_STAGES_FOR_GET_LATEST_VERSIONS as DEFAULT_STAGES_FOR_GET_LATEST_VERSIONS, STAGE_ARCHIVED as STAGE_ARCHIVED, STAGE_DELETED_INTERNAL as STAGE_DELETED_INTERNAL, get_canonical_stage as get_canonical_stage
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE, INVALID_STATE as INVALID_STATE, RESOURCE_ALREADY_EXISTS as RESOURCE_ALREADY_EXISTS, RESOURCE_DOES_NOT_EXIST as RESOURCE_DOES_NOT_EXIST
from mlflow.store.db.base_sql_model import Base as Base
from mlflow.store.entities.paged_list import PagedList as PagedList
from mlflow.store.model_registry import SEARCH_REGISTERED_MODEL_MAX_RESULTS_DEFAULT as SEARCH_REGISTERED_MODEL_MAX_RESULTS_DEFAULT, SEARCH_REGISTERED_MODEL_MAX_RESULTS_THRESHOLD as SEARCH_REGISTERED_MODEL_MAX_RESULTS_THRESHOLD
from mlflow.store.model_registry.abstract_store import AbstractStore as AbstractStore
from mlflow.store.model_registry.dbmodels.models import SqlModelVersion as SqlModelVersion, SqlModelVersionTag as SqlModelVersionTag, SqlRegisteredModel as SqlRegisteredModel, SqlRegisteredModelTag as SqlRegisteredModelTag
from mlflow.utils.search_utils import SearchModelUtils as SearchModelUtils, SearchUtils as SearchUtils
from mlflow.utils.time_utils import get_current_time_millis as get_current_time_millis
from mlflow.utils.uri import extract_db_type_from_uri as extract_db_type_from_uri

class SqlAlchemyStore(AbstractStore):
    CREATE_MODEL_VERSION_RETRIES: int
    db_uri: Incomplete
    db_type: Incomplete
    engine: Incomplete
    ManagedSessionMaker: Incomplete
    def __init__(self, db_uri) -> None: ...
    def create_registered_model(self, name, tags: Incomplete | None = None, description: Incomplete | None = None): ...
    def update_registered_model(self, name, description): ...
    def rename_registered_model(self, name, new_name): ...
    def delete_registered_model(self, name) -> None: ...
    def list_registered_models(self, max_results, page_token): ...
    def search_registered_models(self, filter_string: Incomplete | None = None, max_results=..., order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def get_registered_model(self, name): ...
    def get_latest_versions(self, name, stages: Incomplete | None = None): ...
    def set_registered_model_tag(self, name, tag) -> None: ...
    def delete_registered_model_tag(self, name, key) -> None: ...
    def create_model_version(self, name, source, run_id: Incomplete | None = None, tags: Incomplete | None = None, run_link: Incomplete | None = None, description: Incomplete | None = None): ...
    def update_model_version(self, name, version, description: Incomplete | None = None): ...
    def transition_model_version_stage(self, name, version, stage, archive_existing_versions): ...
    def delete_model_version(self, name, version) -> None: ...
    def get_model_version(self, name, version): ...
    def get_model_version_download_uri(self, name, version): ...
    def search_model_versions(self, filter_string): ...
    def set_model_version_tag(self, name, version, tag) -> None: ...
    def delete_model_version_tag(self, name, version, key) -> None: ...
