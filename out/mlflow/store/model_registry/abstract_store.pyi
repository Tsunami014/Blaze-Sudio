import abc
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod

class AbstractStore(metaclass=abc.ABCMeta):
    __metaclass__ = ABCMeta
    def __init__(self) -> None: ...
    @abstractmethod
    def create_registered_model(self, name, tags: Incomplete | None = None, description: Incomplete | None = None): ...
    @abstractmethod
    def update_registered_model(self, name, description): ...
    @abstractmethod
    def rename_registered_model(self, name, new_name): ...
    @abstractmethod
    def delete_registered_model(self, name): ...
    @abstractmethod
    def list_registered_models(self, max_results, page_token): ...
    @abstractmethod
    def search_registered_models(self, filter_string: Incomplete | None = None, max_results: Incomplete | None = None, order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    @abstractmethod
    def get_registered_model(self, name): ...
    @abstractmethod
    def get_latest_versions(self, name, stages: Incomplete | None = None): ...
    @abstractmethod
    def set_registered_model_tag(self, name, tag): ...
    @abstractmethod
    def delete_registered_model_tag(self, name, key): ...
    @abstractmethod
    def create_model_version(self, name, source, run_id: Incomplete | None = None, tags: Incomplete | None = None, run_link: Incomplete | None = None, description: Incomplete | None = None): ...
    @abstractmethod
    def update_model_version(self, name, version, description): ...
    @abstractmethod
    def transition_model_version_stage(self, name, version, stage, archive_existing_versions): ...
    @abstractmethod
    def delete_model_version(self, name, version): ...
    @abstractmethod
    def get_model_version(self, name, version): ...
    @abstractmethod
    def get_model_version_download_uri(self, name, version): ...
    @abstractmethod
    def search_model_versions(self, filter_string): ...
    @abstractmethod
    def set_model_version_tag(self, name, version, tag): ...
    @abstractmethod
    def delete_model_version_tag(self, name, version, key): ...
