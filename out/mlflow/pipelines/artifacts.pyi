import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from mlflow.pipelines.utils.execution import get_step_output_path as get_step_output_path
from mlflow.tracking import MlflowClient as MlflowClient

class Artifact(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def name(self): ...
    @abstractmethod
    def path(self): ...
    @abstractmethod
    def load(self): ...

class DataframeArtifact(Artifact):
    def __init__(self, name, pipeline_root, step_name, rel_path: str = '') -> None: ...
    def name(self): ...
    def path(self): ...
    def load(self): ...

class ModelArtifact(Artifact):
    def __init__(self, name, pipeline_root, step_name, tracking_uri) -> None: ...
    def name(self): ...
    def path(self): ...
    def load(self): ...

class TransformerArtifact(Artifact):
    def __init__(self, name, pipeline_root, step_name, tracking_uri) -> None: ...
    def name(self): ...
    def path(self): ...
    def load(self): ...

class RunArtifact(Artifact):
    def __init__(self, name, pipeline_root, step_name, tracking_uri) -> None: ...
    def name(self): ...
    def path(self): ...
    def load(self): ...

class ModelVersionArtifact(Artifact):
    def __init__(self, name, pipeline_root, step_name, tracking_uri) -> None: ...
    def name(self): ...
    def path(self): ...
    def load(self): ...

class HyperParametersArtifact(Artifact):
    def __init__(self, name, pipeline_root, step_name) -> None: ...
    def name(self): ...
    def path(self): ...
    def load(self): ...

def log_artifact_not_found_warning(artifact_name, step_name) -> None: ...
def read_run_id(pipeline_root): ...

class RegisteredModelVersionInfo:
    name: Incomplete
    version: Incomplete
    def __init__(self, name: str, version: int) -> None: ...
    def to_json(self, path) -> None: ...
    @classmethod
    def from_json(cls, path): ...
