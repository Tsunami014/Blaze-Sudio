import abc
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.pipelines import dag_help_strings as dag_help_strings
from mlflow.pipelines.artifacts import Artifact as Artifact
from mlflow.pipelines.regression.v1.pipeline import RegressionPipeline as RegressionPipeline
from mlflow.pipelines.step import BaseStep as BaseStep, StepClass as StepClass, StepStatus as StepStatus
from mlflow.pipelines.utils import get_pipeline_config as get_pipeline_config, get_pipeline_name as get_pipeline_name, get_pipeline_root_path as get_pipeline_root_path
from mlflow.pipelines.utils.execution import clean_execution_state as clean_execution_state, get_or_create_base_execution_directory as get_or_create_base_execution_directory, get_step_output_path as get_step_output_path, run_pipeline_step as run_pipeline_step
from mlflow.pipelines.utils.step import display_html as display_html
from mlflow.protos.databricks_pb2 import BAD_REQUEST as BAD_REQUEST, INTERNAL_ERROR as INTERNAL_ERROR, INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE
from mlflow.utils.annotations import experimental as experimental

class _BasePipeline(metaclass=abc.ABCMeta):
    def __init__(self, pipeline_root_path: str, profile: str) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def profile(self) -> str: ...
    def run(self, step: str = None) -> None: ...
    def inspect(self, step: str = None) -> None: ...
    def clean(self, step: str = None) -> None: ...
    def get_artifact(self, artifact_name: str): ...

class Pipeline:
    def __new__(cls, profile: str) -> RegressionPipeline: ...
