from _typeshed import Incomplete
from mlflow.utils.autologging_utils import ExceptionSafeClass as ExceptionSafeClass, INPUT_EXAMPLE_SAMPLE_ROWS as INPUT_EXAMPLE_SAMPLE_ROWS
from tensorflow.keras.callbacks import Callback, TensorBoard

class _TensorBoard(TensorBoard, metaclass=ExceptionSafeClass): ...

class __MLflowTfKeras2Callback(Callback, metaclass=ExceptionSafeClass):
    metrics_logger: Incomplete
    log_every_n_steps: Incomplete
    def __init__(self, metrics_logger, log_every_n_steps) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_epoch_end(self, epoch, logs: Incomplete | None = None) -> None: ...

def extract_input_example_from_tf_input_fn(input_fn): ...
def extract_tf_keras_input_example(input_training_data): ...
