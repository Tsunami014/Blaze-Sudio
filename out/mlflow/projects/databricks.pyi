from _typeshed import Incomplete
from mlflow import tracking as tracking
from mlflow.entities import RunStatus as RunStatus
from mlflow.exceptions import ExecutionException as ExecutionException, MlflowException as MlflowException
from mlflow.projects.submitted_run import SubmittedRun as SubmittedRun
from mlflow.projects.utils import MLFLOW_LOCAL_BACKEND_RUN_ID_CONFIG as MLFLOW_LOCAL_BACKEND_RUN_ID_CONFIG
from mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE
from mlflow.utils import databricks_utils as databricks_utils, file_utils as file_utils, rest_utils as rest_utils
from mlflow.utils.mlflow_tags import MLFLOW_DATABRICKS_RUN_URL as MLFLOW_DATABRICKS_RUN_URL, MLFLOW_DATABRICKS_SHELL_JOB_ID as MLFLOW_DATABRICKS_SHELL_JOB_ID, MLFLOW_DATABRICKS_SHELL_JOB_RUN_ID as MLFLOW_DATABRICKS_SHELL_JOB_RUN_ID, MLFLOW_DATABRICKS_WEBAPP_URL as MLFLOW_DATABRICKS_WEBAPP_URL
from mlflow.utils.string_utils import quote as quote
from mlflow.utils.uri import is_databricks_uri as is_databricks_uri, is_http_uri as is_http_uri
from mlflow.version import VERSION as VERSION, is_release_version as is_release_version

DB_CONTAINER_BASE: str
DB_TARFILE_BASE: Incomplete
DB_PROJECTS_BASE: Incomplete
DB_TARFILE_ARCHIVE_NAME: str
DBFS_EXPERIMENT_DIR_BASE: str

def before_run_validations(tracking_uri, backend_config) -> None: ...

class DatabricksJobRunner:
    databricks_profile_uri: Incomplete
    def __init__(self, databricks_profile_uri) -> None: ...
    def run_databricks(self, uri, entry_point, work_dir, parameters, experiment_id, cluster_spec, run_id, env_manager): ...
    def get_status(self, databricks_run_id): ...
    def get_run_result_state(self, databricks_run_id): ...
    def jobs_runs_cancel(self, databricks_run_id): ...
    def jobs_runs_get(self, databricks_run_id): ...

def run_databricks(remote_run, uri, entry_point, work_dir, parameters, experiment_id, cluster_spec, env_manager): ...

class DatabricksSubmittedRun(SubmittedRun):
    POLL_STATUS_INTERVAL: int
    def __init__(self, databricks_run_id, mlflow_run_id, databricks_job_runner) -> None: ...
    @property
    def run_id(self): ...
    def wait(self): ...
    def cancel(self) -> None: ...
    def get_status(self): ...
