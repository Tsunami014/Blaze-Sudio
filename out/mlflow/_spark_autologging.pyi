from _typeshed import Incomplete
from mlflow import MlflowClient as MlflowClient
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.spark import FLAVOR_NAME as FLAVOR_NAME
from mlflow.tracking.context.abstract_context import RunContextProvider as RunContextProvider
from mlflow.utils.autologging_utils import ExceptionSafeClass as ExceptionSafeClass, autologging_is_disabled as autologging_is_disabled
from mlflow.utils.validation import MAX_TAG_VAL_LENGTH as MAX_TAG_VAL_LENGTH

def add_table_info_to_context_provider(path, version, data_format) -> None: ...

class PythonSubscriber(metaclass=ExceptionSafeClass):
    def __init__(self) -> None: ...
    def toString(self): ...
    def ping(self) -> None: ...
    def notify(self, path, version, data_format) -> None: ...
    def replId(self): ...
    class Java:
        implements: Incomplete

class SparkAutologgingContext(RunContextProvider):
    def in_context(self): ...
    def tags(self): ...
