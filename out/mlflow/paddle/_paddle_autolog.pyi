import paddle
from _typeshed import Incomplete
from mlflow.utils.autologging_utils import BatchMetricsLogger as BatchMetricsLogger, ExceptionSafeAbstractClass as ExceptionSafeAbstractClass, MlflowAutologgingQueueingClient as MlflowAutologgingQueueingClient, get_autologging_config as get_autologging_config

class __MLflowPaddleCallback(paddle.callbacks.Callback, metaclass=ExceptionSafeAbstractClass):
    early_stopping: bool
    client: Incomplete
    metrics_logger: Incomplete
    run_id: Incomplete
    log_models: Incomplete
    log_every_n_epoch: Incomplete
    epoch: int
    def __init__(self, client, metrics_logger, run_id, log_models, log_every_n_epoch) -> None: ...
    def on_epoch_end(self, epoch, logs: Incomplete | None = None) -> None: ...
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_train_end(self, logs: Incomplete | None = None) -> None: ...
    def on_eval_end(self, logs: Incomplete | None = None) -> None: ...

def patched_fit(original, self, *args, **kwargs): ...
