from _typeshed import Incomplete
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.utils.rest_utils import MlflowHostCreds as MlflowHostCreds
from mlflow.utils.uri import get_db_info_from_uri as get_db_info_from_uri, is_databricks_uri as is_databricks_uri
from typing import TypeVar

class MlflowCredentialContext:
    databricks_profile_url: Incomplete
    db_utils: Incomplete
    def __init__(self, databricks_profile_url) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: types.TracebackType | None) -> None: ...

class _NoDbutilsError(Exception): ...

def acl_path_of_acl_root(): ...
def is_databricks_default_tracking_uri(tracking_uri): ...
def is_in_databricks_notebook(): ...
def is_in_databricks_job(): ...
def is_in_databricks_repo(): ...
def is_in_databricks_repo_notebook(): ...
def is_in_databricks_runtime(): ...
def is_dbfs_fuse_available(): ...
def is_in_cluster(): ...
def get_notebook_id(): ...
def get_notebook_path(): ...
def get_databricks_runtime(): ...
def get_cluster_id(): ...
def get_job_group_id(): ...
def get_repl_id(): ...
def get_job_id(): ...
def get_job_run_id(): ...
def get_job_type(): ...
def get_job_type_info(): ...
def get_experiment_name_from_job_id(job_id): ...
def get_command_run_id(): ...
def get_webapp_url(): ...
def get_workspace_id(): ...
def get_browser_hostname(): ...
def get_workspace_info_from_dbutils(): ...
def get_workspace_url(): ...
def get_workspace_info_from_databricks_secrets(tracking_uri): ...
def get_databricks_host_creds(server_uri: Incomplete | None = None): ...
def get_git_repo_url(): ...
def get_git_repo_provider(): ...
def get_git_repo_commit(): ...
def get_git_repo_relative_path(): ...
def get_git_repo_reference(): ...
def get_git_repo_reference_type(): ...
def get_git_repo_status(): ...
def is_running_in_ipython_environment(): ...
def get_databricks_run_url(tracking_uri: str, run_id: str, artifact_path: Incomplete | None = None) -> str | None: ...
def get_databricks_model_version_url(registry_uri: str, name: str, version: str) -> str | None: ...
DatabricksWorkspaceInfoType = TypeVar('DatabricksWorkspaceInfo', bound='DatabricksWorkspaceInfo')

class DatabricksWorkspaceInfo:
    WORKSPACE_HOST_ENV_VAR: str
    WORKSPACE_ID_ENV_VAR: str
    host: Incomplete
    workspace_id: Incomplete
    def __init__(self, host: str, workspace_id: str | None = None) -> None: ...
    @classmethod
    def from_environment(cls) -> DatabricksWorkspaceInfoType | None: ...
    def to_environment(self): ...

def get_databricks_workspace_info_from_uri(tracking_uri: str) -> DatabricksWorkspaceInfo | None: ...
