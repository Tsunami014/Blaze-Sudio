from _typeshed import Incomplete

string_types: Incomplete

def synchronized(lock): ...
def register_generic_import_hook(hook, name, hook_dict, overwrite): ...
def register_import_error_hook(hook, name, overwrite: bool = True) -> None: ...
def register_post_import_hook(hook, name, overwrite: bool = True) -> None: ...
def discover_post_import_hooks(group) -> None: ...
def notify_module_loaded(module) -> None: ...
def notify_module_import_error(module_name) -> None: ...

class _ImportHookChainedLoader:
    loader: Incomplete
    def __init__(self, loader) -> None: ...
    def load_module(self, fullname): ...

class ImportHookFinder:
    in_progress: Incomplete
    def __init__(self) -> None: ...
    def find_module(self, fullname, path: Incomplete | None = None): ...
    def find_spec(self, fullname, path, target: Incomplete | None = None): ...

def when_imported(name, error_handler: bool = False): ...
