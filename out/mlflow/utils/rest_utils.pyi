from _typeshed import Incomplete
from collections.abc import Generator
from mlflow.environment_variables import MLFLOW_HTTP_REQUEST_BACKOFF_FACTOR as MLFLOW_HTTP_REQUEST_BACKOFF_FACTOR, MLFLOW_HTTP_REQUEST_MAX_RETRIES as MLFLOW_HTTP_REQUEST_MAX_RETRIES, MLFLOW_HTTP_REQUEST_TIMEOUT as MLFLOW_HTTP_REQUEST_TIMEOUT
from mlflow.exceptions import MlflowException as MlflowException, RestException as RestException, get_error_code as get_error_code
from mlflow.protos import databricks_pb2 as databricks_pb2
from mlflow.protos.databricks_pb2 import ENDPOINT_NOT_FOUND as ENDPOINT_NOT_FOUND, ErrorCode as ErrorCode, INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE
from mlflow.utils.proto_json_utils import parse_dict as parse_dict
from mlflow.utils.string_utils import strip_suffix as strip_suffix

RESOURCE_DOES_NOT_EXIST: str

def http_request(host_creds, endpoint, method, max_retries: Incomplete | None = None, backoff_factor: Incomplete | None = None, retry_codes=..., timeout: Incomplete | None = None, **kwargs): ...
def http_request_safe(host_creds, endpoint, method, **kwargs): ...
def verify_rest_response(response, endpoint): ...
def augmented_raise_for_status(response) -> None: ...
def extract_api_info_for_service(service, path_prefix): ...
def extract_all_api_info_for_service(service, path_prefix): ...
def call_endpoint(host_creds, endpoint, method, json_body, response_proto): ...
def call_endpoints(host_creds, endpoints, json_body, response_proto): ...
def cloud_storage_http_request(method, url, max_retries: int = 5, backoff_factor: int = 2, retry_codes=..., timeout: Incomplete | None = None, **kwargs) -> Generator[Incomplete, None, None]: ...

class MlflowHostCreds:
    host: Incomplete
    username: Incomplete
    password: Incomplete
    token: Incomplete
    aws_sigv4: Incomplete
    ignore_tls_verification: Incomplete
    client_cert_path: Incomplete
    server_cert_path: Incomplete
    def __init__(self, host, username: Incomplete | None = None, password: Incomplete | None = None, token: Incomplete | None = None, aws_sigv4: bool = False, ignore_tls_verification: bool = False, client_cert_path: Incomplete | None = None, server_cert_path: Incomplete | None = None) -> None: ...
    def __eq__(self, other): ...
