from collections.abc import Generator
from mlflow.utils import logging_utils as logging_utils

class _WarningsController:
    def __init__(self) -> None: ...
    def set_mlflow_warnings_disablement_state_globally(self, disabled: bool = True) -> None: ...
    def set_mlflow_warnings_rerouting_state_globally(self, rerouted: bool = True) -> None: ...
    def set_non_mlflow_warnings_disablement_state_for_current_thread(self, disabled: bool = True) -> None: ...
    def set_non_mlflow_warnings_rerouting_state_for_current_thread(self, rerouted: bool = True) -> None: ...
    def get_warnings_disablement_state_for_current_thread(self): ...
    def get_warnings_rerouting_state_for_current_thread(self): ...

def set_non_mlflow_warnings_behavior_for_current_thread(disable_warnings, reroute_warnings) -> Generator[None, None, None]: ...
def set_mlflow_events_and_warnings_behavior_globally(disable_event_logs, disable_warnings, reroute_warnings) -> Generator[None, None, None]: ...

class _SetMLflowEventsAndWarningsBehaviorGlobally:
    def __init__(self, disable_event_logs, disable_warnings, reroute_warnings) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *args, **kwargs) -> None: ...
