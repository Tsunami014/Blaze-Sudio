from _typeshed import Incomplete
from typing import Any, NamedTuple

__all__ = ['MlflowAutologgingQueueingClient']

class _PendingCreateRun(NamedTuple):
    experiment_id: Incomplete
    start_time: Incomplete
    tags: Incomplete
    run_name: Incomplete

class _PendingSetTerminated(NamedTuple):
    status: Incomplete
    end_time: Incomplete

class PendingRunId: ...

class RunOperations:
    def __init__(self, operation_futures) -> None: ...
    def await_completion(self) -> None: ...

class MlflowAutologgingQueueingClient:
    def __init__(self, tracking_uri: Incomplete | None = None) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def create_run(self, experiment_id: str, start_time: int | None = None, tags: dict[str, Any] | None = None, run_name: str | None = None) -> PendingRunId: ...
    def set_terminated(self, run_id: str | PendingRunId, status: str | None = None, end_time: int | None = None) -> None: ...
    def log_params(self, run_id: str | PendingRunId, params: dict[str, Any]) -> None: ...
    def log_metrics(self, run_id: str | PendingRunId, metrics: dict[str, float], step: int | None = None) -> None: ...
    def set_tags(self, run_id: str | PendingRunId, tags: dict[str, Any]) -> None: ...
    def flush(self, synchronous: bool = True): ...

class _PendingRunOperations:
    run_id: Incomplete
    create_run: Incomplete
    set_terminated: Incomplete
    params_queue: Incomplete
    tags_queue: Incomplete
    metrics_queue: Incomplete
    def __init__(self, run_id) -> None: ...
    def enqueue(self, params: Incomplete | None = None, tags: Incomplete | None = None, metrics: Incomplete | None = None, create_run: Incomplete | None = None, set_terminated: Incomplete | None = None) -> None: ...
