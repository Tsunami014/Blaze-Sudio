from mlflow.utils.autologging_utils.safety import *
from mlflow.utils.autologging_utils.events import *
from mlflow.utils.autologging_utils.client import *
from _typeshed import Incomplete
from collections.abc import Generator
from mlflow.entities import Metric as Metric
from mlflow.tracking.client import MlflowClient as MlflowClient
from mlflow.utils.autologging_utils.logging_and_warnings import set_mlflow_events_and_warnings_behavior_globally as set_mlflow_events_and_warnings_behavior_globally, set_non_mlflow_warnings_behavior_for_current_thread as set_non_mlflow_warnings_behavior_for_current_thread
from mlflow.utils.autologging_utils.safety import revert_patches as revert_patches, update_wrapper_extended as update_wrapper_extended
from mlflow.utils.autologging_utils.versioning import FLAVOR_TO_MODULE_NAME_AND_VERSION_INFO_KEY as FLAVOR_TO_MODULE_NAME_AND_VERSION_INFO_KEY, get_min_max_version_and_pip_release as get_min_max_version_and_pip_release, is_flavor_supported_for_associated_package_versions as is_flavor_supported_for_associated_package_versions
from mlflow.utils.validation import MAX_METRICS_PER_BATCH as MAX_METRICS_PER_BATCH

INPUT_EXAMPLE_SAMPLE_ROWS: int
ENSURE_AUTOLOGGING_ENABLED_TEXT: str
AUTOLOGGING_CONF_KEY_IS_GLOBALLY_CONFIGURED: str
AUTOLOGGING_INTEGRATIONS: Incomplete

def get_mlflow_run_params_for_fn_args(fn, args, kwargs, unlogged: Incomplete | None = None): ...
def log_fn_args_as_params(fn, args, kwargs, unlogged: Incomplete | None = None) -> None: ...

class InputExampleInfo:
    input_example: Incomplete
    error_msg: Incomplete
    def __init__(self, input_example: Incomplete | None = None, error_msg: Incomplete | None = None) -> None: ...

def resolve_input_example_and_signature(get_input_example, infer_model_signature, log_input_example, log_model_signature, logger): ...

class BatchMetricsLogger:
    run_id: Incomplete
    client: Incomplete
    data: Incomplete
    total_training_time: int
    total_log_batch_time: int
    previous_training_timestamp: Incomplete
    def __init__(self, run_id: Incomplete | None = None, tracking_uri: Incomplete | None = None) -> None: ...
    def flush(self) -> None: ...
    def record_metrics(self, metrics, step: Incomplete | None = None) -> None: ...

def batch_metrics_logger(run_id) -> Generator[Incomplete, None, None]: ...
def gen_autologging_package_version_requirements_doc(integration_name): ...
def autologging_integration(name): ...
def get_autologging_config(flavor_name, config_key, default_value: Incomplete | None = None): ...
def autologging_is_disabled(integration_name): ...
def disable_autologging() -> Generator[None, None, None]: ...
def get_instance_method_first_arg_value(method, call_pos_args, call_kwargs): ...
def get_method_call_arg_value(arg_index, arg_name, default_value, call_pos_args, call_kwargs): ...
