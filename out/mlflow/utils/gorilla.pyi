from _typeshed import Incomplete

__version__: str

def default_filter(name, obj): ...

class DecoratorData:
    patches: Incomplete
    override: Incomplete
    filter: Incomplete
    def __init__(self) -> None: ...

class Settings:
    allow_hit: bool
    store_hit: bool
    def __init__(self, **kwargs) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class Patch:
    destination: Incomplete
    name: Incomplete
    obj: Incomplete
    settings: Incomplete
    is_inplace_patch: Incomplete
    def __init__(self, destination, name, obj, settings: Incomplete | None = None) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

def apply(patch) -> None: ...
def revert(patch) -> None: ...
def patch(destination, name: Incomplete | None = None, settings: Incomplete | None = None): ...
def destination(value): ...
def name(value): ...
def settings(**kwargs): ...
def filter(value): ...
def find_patches(modules, recursive: bool = True): ...
def get_original_attribute(obj, name, bypass_descriptor_protocol: bool = False): ...
def get_decorator_data(obj, set_default: bool = False): ...
