from _typeshed import Incomplete
from mlflow.entities.model_registry import ModelVersionTag as ModelVersionTag, RegisteredModelTag as RegisteredModelTag
from mlflow.entities.model_registry.model_version_status import ModelVersionStatus as ModelVersionStatus
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.store.model_registry import SEARCH_REGISTERED_MODEL_MAX_RESULTS_DEFAULT as SEARCH_REGISTERED_MODEL_MAX_RESULTS_DEFAULT
from mlflow.tracking._model_registry import DEFAULT_AWAIT_MAX_SLEEP_SECONDS as DEFAULT_AWAIT_MAX_SLEEP_SECONDS, utils as utils

AWAIT_MODEL_VERSION_CREATE_SLEEP_DURATION_SECONDS: int

class ModelRegistryClient:
    registry_uri: Incomplete
    def __init__(self, registry_uri) -> None: ...
    @property
    def store(self): ...
    def create_registered_model(self, name, tags: Incomplete | None = None, description: Incomplete | None = None): ...
    def update_registered_model(self, name, description): ...
    def rename_registered_model(self, name, new_name): ...
    def delete_registered_model(self, name) -> None: ...
    def list_registered_models(self, max_results=..., page_token: Incomplete | None = None): ...
    def search_registered_models(self, filter_string: Incomplete | None = None, max_results=..., order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def get_registered_model(self, name): ...
    def get_latest_versions(self, name, stages: Incomplete | None = None): ...
    def set_registered_model_tag(self, name, key, value) -> None: ...
    def delete_registered_model_tag(self, name, key) -> None: ...
    def create_model_version(self, name, source, run_id: Incomplete | None = None, tags: Incomplete | None = None, run_link: Incomplete | None = None, description: Incomplete | None = None, await_creation_for=...): ...
    def update_model_version(self, name, version, description): ...
    def transition_model_version_stage(self, name, version, stage, archive_existing_versions: bool = False): ...
    def get_model_version(self, name, version): ...
    def delete_model_version(self, name, version) -> None: ...
    def get_model_version_download_uri(self, name, version): ...
    def search_model_versions(self, filter_string): ...
    def get_model_version_stages(self, name, version): ...
    def set_model_version_tag(self, name, version, key, value) -> None: ...
    def delete_model_version_tag(self, name, version, key) -> None: ...
