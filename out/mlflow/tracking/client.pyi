import PIL
import matplotlib
import numpy
import plotly
from _typeshed import Incomplete
from mlflow.entities import Experiment as Experiment, FileInfo as FileInfo, Metric as Metric, Param as Param, Run as Run, RunInfo as RunInfo, RunTag as RunTag, ViewType as ViewType
from mlflow.entities.model_registry import ModelVersion as ModelVersion, RegisteredModel as RegisteredModel
from mlflow.entities.model_registry.model_version_stages import ALL_STAGES as ALL_STAGES
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.protos.databricks_pb2 import FEATURE_DISABLED as FEATURE_DISABLED
from mlflow.store.entities.paged_list import PagedList as PagedList
from mlflow.store.model_registry import SEARCH_REGISTERED_MODEL_MAX_RESULTS_DEFAULT as SEARCH_REGISTERED_MODEL_MAX_RESULTS_DEFAULT
from mlflow.store.tracking import SEARCH_MAX_RESULTS_DEFAULT as SEARCH_MAX_RESULTS_DEFAULT
from mlflow.tracking._model_registry import DEFAULT_AWAIT_MAX_SLEEP_SECONDS as DEFAULT_AWAIT_MAX_SLEEP_SECONDS
from mlflow.tracking._model_registry.client import ModelRegistryClient as ModelRegistryClient
from mlflow.tracking._tracking_service import utils as utils
from mlflow.tracking._tracking_service.client import TrackingServiceClient as TrackingServiceClient
from mlflow.tracking.registry import UnsupportedModelRegistryStoreURIException as UnsupportedModelRegistryStoreURIException
from mlflow.utils.annotations import deprecated as deprecated
from mlflow.utils.databricks_utils import get_databricks_run_url as get_databricks_run_url
from mlflow.utils.logging_utils import eprint as eprint
from mlflow.utils.uri import is_databricks_uri as is_databricks_uri
from typing import Any, Sequence

class MlflowClient:
    def __init__(self, tracking_uri: str | None = None, registry_uri: str | None = None) -> None: ...
    @property
    def tracking_uri(self): ...
    def get_run(self, run_id: str) -> Run: ...
    def get_metric_history(self, run_id: str, key: str) -> list[Metric]: ...
    def create_run(self, experiment_id: str, start_time: int | None = None, tags: dict[str, Any] | None = None, run_name: str | None = None) -> Run: ...
    def list_run_infos(self, experiment_id: str, run_view_type: int = ..., max_results: int = ..., order_by: list[str] | None = None, page_token: str | None = None) -> PagedList[RunInfo]: ...
    def list_experiments(self, view_type: int = ..., max_results: int | None = None, page_token: str | None = None) -> PagedList[Experiment]: ...
    def search_experiments(self, view_type: int = ..., max_results: int | None = ..., filter_string: str | None = None, order_by: list[str] | None = None, page_token: Incomplete | None = None) -> PagedList[Experiment]: ...
    def get_experiment(self, experiment_id: str) -> Experiment: ...
    def get_experiment_by_name(self, name: str) -> Experiment | None: ...
    def create_experiment(self, name: str, artifact_location: str | None = None, tags: dict[str, Any] | None = None) -> str: ...
    def delete_experiment(self, experiment_id: str) -> None: ...
    def restore_experiment(self, experiment_id: str) -> None: ...
    def rename_experiment(self, experiment_id: str, new_name: str) -> None: ...
    def log_metric(self, run_id: str, key: str, value: float, timestamp: int | None = None, step: int | None = None) -> None: ...
    def log_param(self, run_id: str, key: str, value: Any) -> Any: ...
    def set_experiment_tag(self, experiment_id: str, key: str, value: Any) -> None: ...
    def set_tag(self, run_id: str, key: str, value: Any) -> None: ...
    def delete_tag(self, run_id: str, key: str) -> None: ...
    def update_run(self, run_id: str, status: str | None = None, name: str | None = None) -> None: ...
    def log_batch(self, run_id: str, metrics: Sequence[Metric] = (), params: Sequence[Param] = (), tags: Sequence[RunTag] = ()) -> None: ...
    def log_artifact(self, run_id, local_path, artifact_path: Incomplete | None = None) -> None: ...
    def log_artifacts(self, run_id: str, local_dir: str, artifact_path: str | None = None) -> None: ...
    def log_text(self, run_id: str, text: str, artifact_file: str) -> None: ...
    def log_dict(self, run_id: str, dictionary: Any, artifact_file: str) -> None: ...
    def log_figure(self, run_id: str, figure: matplotlib.figure.Figure | plotly.graph_objects.Figure, artifact_file: str) -> None: ...
    def log_image(self, run_id: str, image: numpy.ndarray | PIL.Image.Image, artifact_file: str) -> None: ...
    def list_artifacts(self, run_id: str, path: Incomplete | None = None) -> list[FileInfo]: ...
    def download_artifacts(self, run_id: str, path: str, dst_path: str | None = None) -> str: ...
    def set_terminated(self, run_id: str, status: str | None = None, end_time: int | None = None) -> None: ...
    def delete_run(self, run_id: str) -> None: ...
    def restore_run(self, run_id: str) -> None: ...
    def search_runs(self, experiment_ids: list[str], filter_string: str = '', run_view_type: int = ..., max_results: int = ..., order_by: list[str] | None = None, page_token: str | None = None) -> PagedList[Run]: ...
    def create_registered_model(self, name: str, tags: dict[str, Any] | None = None, description: str | None = None) -> RegisteredModel: ...
    def rename_registered_model(self, name: str, new_name: str) -> RegisteredModel: ...
    def update_registered_model(self, name: str, description: str | None = None) -> RegisteredModel: ...
    def delete_registered_model(self, name: str): ...
    def list_registered_models(self, max_results: int = ..., page_token: str | None = None) -> PagedList[RegisteredModel]: ...
    def search_registered_models(self, filter_string: str | None = None, max_results: int = ..., order_by: list[str] | None = None, page_token: str | None = None) -> PagedList[RegisteredModel]: ...
    def get_registered_model(self, name: str) -> RegisteredModel: ...
    def get_latest_versions(self, name: str, stages: list[str] = None) -> list[ModelVersion]: ...
    def set_registered_model_tag(self, name, key, value) -> None: ...
    def delete_registered_model_tag(self, name: str, key: str) -> None: ...
    def create_model_version(self, name: str, source: str, run_id: str | None = None, tags: dict[str, Any] | None = None, run_link: str | None = None, description: str | None = None, await_creation_for: int = ...) -> ModelVersion: ...
    def update_model_version(self, name: str, version: str, description: str | None = None) -> ModelVersion: ...
    def transition_model_version_stage(self, name: str, version: str, stage: str, archive_existing_versions: bool = False) -> ModelVersion: ...
    def delete_model_version(self, name: str, version: str) -> None: ...
    def get_model_version(self, name: str, version: str) -> ModelVersion: ...
    def get_model_version_download_uri(self, name: str, version: str) -> str: ...
    def search_model_versions(self, filter_string: str) -> PagedList[ModelVersion]: ...
    def get_model_version_stages(self, name: str, version: str) -> list[str]: ...
    def set_model_version_tag(self, name: str, version: str = None, key: str = None, value: Any = None, stage: str = None) -> None: ...
    def delete_model_version_tag(self, name: str, version: str = None, key: str = None, stage: str = None) -> None: ...
