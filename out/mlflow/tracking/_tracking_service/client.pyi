from _typeshed import Incomplete
from mlflow.entities import ExperimentTag as ExperimentTag, Metric as Metric, Param as Param, RunStatus as RunStatus, RunTag as RunTag, ViewType as ViewType
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.protos.databricks_pb2 import ErrorCode as ErrorCode, INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE
from mlflow.store.artifact.artifact_repository_registry import get_artifact_repository as get_artifact_repository
from mlflow.store.tracking import SEARCH_MAX_RESULTS_DEFAULT as SEARCH_MAX_RESULTS_DEFAULT
from mlflow.tracking._tracking_service import utils as utils
from mlflow.tracking.metric_value_conversion_utils import convert_metric_value_to_float_if_possible as convert_metric_value_to_float_if_possible
from mlflow.utils import chunk_list as chunk_list
from mlflow.utils.mlflow_tags import MLFLOW_USER as MLFLOW_USER
from mlflow.utils.string_utils import is_string_type as is_string_type
from mlflow.utils.time_utils import get_current_time_millis as get_current_time_millis
from mlflow.utils.uri import add_databricks_profile_info_to_artifact_uri as add_databricks_profile_info_to_artifact_uri
from mlflow.utils.validation import MAX_ENTITIES_PER_BATCH as MAX_ENTITIES_PER_BATCH, MAX_METRICS_PER_BATCH as MAX_METRICS_PER_BATCH, MAX_PARAMS_TAGS_PER_BATCH as MAX_PARAMS_TAGS_PER_BATCH, PARAM_VALIDATION_MSG as PARAM_VALIDATION_MSG

class TrackingServiceClient:
    tracking_uri: Incomplete
    def __init__(self, tracking_uri) -> None: ...
    @property
    def store(self): ...
    def get_run(self, run_id): ...
    def get_metric_history(self, run_id, key): ...
    def create_run(self, experiment_id, start_time: Incomplete | None = None, tags: Incomplete | None = None, run_name: Incomplete | None = None): ...
    def list_run_infos(self, experiment_id, run_view_type=..., max_results=..., order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def list_experiments(self, view_type=..., max_results: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def search_experiments(self, view_type=..., max_results=..., filter_string: Incomplete | None = None, order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
    def get_experiment(self, experiment_id): ...
    def get_experiment_by_name(self, name): ...
    def create_experiment(self, name, artifact_location: Incomplete | None = None, tags: Incomplete | None = None): ...
    def delete_experiment(self, experiment_id) -> None: ...
    def restore_experiment(self, experiment_id) -> None: ...
    def rename_experiment(self, experiment_id, new_name) -> None: ...
    def log_metric(self, run_id, key, value, timestamp: Incomplete | None = None, step: Incomplete | None = None) -> None: ...
    def log_param(self, run_id, key, value) -> None: ...
    def set_experiment_tag(self, experiment_id, key, value) -> None: ...
    def set_tag(self, run_id, key, value) -> None: ...
    def delete_tag(self, run_id, key) -> None: ...
    def update_run(self, run_id, status: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    def log_batch(self, run_id, metrics=(), params=(), tags=()) -> None: ...
    def log_artifact(self, run_id, local_path, artifact_path: Incomplete | None = None) -> None: ...
    def log_artifacts(self, run_id, local_dir, artifact_path: Incomplete | None = None) -> None: ...
    def list_artifacts(self, run_id, path: Incomplete | None = None): ...
    def download_artifacts(self, run_id, path, dst_path: Incomplete | None = None): ...
    def set_terminated(self, run_id, status: Incomplete | None = None, end_time: Incomplete | None = None) -> None: ...
    def delete_run(self, run_id) -> None: ...
    def restore_run(self, run_id) -> None: ...
    def search_runs(self, experiment_ids, filter_string: str = '', run_view_type=..., max_results=..., order_by: Incomplete | None = None, page_token: Incomplete | None = None): ...
