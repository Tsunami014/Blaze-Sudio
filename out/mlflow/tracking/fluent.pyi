import PIL
import matplotlib.figure
import numpy
import pandas
import plotly
from mlflow.entities import Experiment as Experiment, Metric as Metric, Param as Param, Run as Run, RunInfo as RunInfo, RunStatus as RunStatus, RunTag as RunTag, ViewType as ViewType
from mlflow.entities.lifecycle_stage import LifecycleStage as LifecycleStage
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE, RESOURCE_DOES_NOT_EXIST as RESOURCE_DOES_NOT_EXIST
from mlflow.store.tracking import SEARCH_MAX_RESULTS_DEFAULT as SEARCH_MAX_RESULTS_DEFAULT
from mlflow.tracking import artifact_utils as artifact_utils
from mlflow.tracking.client import MlflowClient as MlflowClient
from mlflow.utils import env as env
from mlflow.utils.annotations import deprecated as deprecated
from mlflow.utils.autologging_utils import AUTOLOGGING_CONF_KEY_IS_GLOBALLY_CONFIGURED as AUTOLOGGING_CONF_KEY_IS_GLOBALLY_CONFIGURED, AUTOLOGGING_INTEGRATIONS as AUTOLOGGING_INTEGRATIONS, autologging_integration as autologging_integration, autologging_is_disabled as autologging_is_disabled, is_testing as is_testing
from mlflow.utils.import_hooks import register_post_import_hook as register_post_import_hook
from mlflow.utils.mlflow_tags import MLFLOW_EXPERIMENT_PRIMARY_METRIC_GREATER_IS_BETTER as MLFLOW_EXPERIMENT_PRIMARY_METRIC_GREATER_IS_BETTER, MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME as MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME, MLFLOW_PARENT_RUN_ID as MLFLOW_PARENT_RUN_ID, MLFLOW_RUN_NAME as MLFLOW_RUN_NAME, MLFLOW_RUN_NOTE as MLFLOW_RUN_NOTE
from mlflow.utils.time_utils import get_current_time_millis as get_current_time_millis
from typing import Any

SEARCH_MAX_RESULTS_PANDAS: int
NUM_RUNS_PER_PAGE_PANDAS: int

def set_experiment(experiment_name: str = None, experiment_id: str = None) -> Experiment: ...

class ActiveRun(Run):
    def __init__(self, run) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None): ...

def start_run(run_id: str = None, experiment_id: str | None = None, run_name: str | None = None, nested: bool = False, tags: dict[str, Any] | None = None, description: str | None = None) -> ActiveRun: ...
def end_run(status: str = ...) -> None: ...
def active_run() -> ActiveRun | None: ...
def last_active_run() -> Run | None: ...
def get_run(run_id: str) -> Run: ...
def log_param(key: str, value: Any) -> Any: ...
def set_experiment_tag(key: str, value: Any) -> None: ...
def set_tag(key: str, value: Any) -> None: ...
def delete_tag(key: str) -> None: ...
def log_metric(key: str, value: float, step: int | None = None) -> None: ...
def log_metrics(metrics: dict[str, float], step: int | None = None) -> None: ...
def log_params(params: dict[str, Any]) -> None: ...
def set_experiment_tags(tags: dict[str, Any]) -> None: ...
def set_tags(tags: dict[str, Any]) -> None: ...
def log_artifact(local_path: str, artifact_path: str | None = None) -> None: ...
def log_artifacts(local_dir: str, artifact_path: str | None = None) -> None: ...
def log_text(text: str, artifact_file: str) -> None: ...
def log_dict(dictionary: Any, artifact_file: str) -> None: ...
def log_figure(figure: matplotlib.figure.Figure | plotly.graph_objects.Figure, artifact_file: str) -> None: ...
def log_image(image: numpy.ndarray | PIL.Image.Image, artifact_file: str) -> None: ...
def get_experiment(experiment_id: str) -> Experiment: ...
def get_experiment_by_name(name: str) -> Experiment | None: ...
def list_experiments(view_type: int = ..., max_results: int | None = None) -> list[Experiment]: ...
def search_experiments(view_type: int = ..., max_results: int | None = None, filter_string: str | None = None, order_by: list[str] | None = None) -> list[Experiment]: ...
def create_experiment(name: str, artifact_location: str | None = None, tags: dict[str, Any] | None = None) -> str: ...
def delete_experiment(experiment_id: str) -> None: ...
def delete_run(run_id: str) -> None: ...
def get_artifact_uri(artifact_path: str | None = None) -> str: ...
def search_runs(experiment_ids: list[str] | None = None, filter_string: str = '', run_view_type: int = ..., max_results: int = ..., order_by: list[str] | None = None, output_format: str = 'pandas', search_all_experiments: bool = False, experiment_names: list[str] | None = None) -> list[Run] | pandas.DataFrame: ...
def list_run_infos(experiment_id: str, run_view_type: int = ..., max_results: int = ..., order_by: list[str] | None = None) -> list[RunInfo]: ...
def autolog(log_input_examples: bool = False, log_model_signatures: bool = True, log_models: bool = True, disable: bool = False, exclusive: bool = False, disable_for_unsupported_versions: bool = False, silent: bool = False) -> None: ...
