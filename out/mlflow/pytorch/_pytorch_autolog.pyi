import pytorch_lightning as pl
from _typeshed import Incomplete
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.utils.autologging_utils import BatchMetricsLogger as BatchMetricsLogger, ExceptionSafeAbstractClass as ExceptionSafeAbstractClass, MlflowAutologgingQueueingClient as MlflowAutologgingQueueingClient, get_autologging_config as get_autologging_config

class __MLflowPLCallback(pl.Callback, metaclass=ExceptionSafeAbstractClass):
    early_stopping: bool
    client: Incomplete
    metrics_logger: Incomplete
    run_id: Incomplete
    log_models: Incomplete
    log_every_n_epoch: Incomplete
    log_every_n_step: Incomplete
    def __init__(self, client, metrics_logger, run_id, log_models, log_every_n_epoch, log_every_n_step) -> None: ...
    def on_train_epoch_end(self, trainer, pl_module, *args) -> None: ...
    def on_train_epoch_end(self, trainer, pl_module, *args) -> None: ...
    def on_validation_epoch_end(self, trainer, pl_module) -> None: ...
    def on_epoch_end(self, trainer, pl_module) -> None: ...
    def on_train_batch_end(self, trainer, pl_module, *args) -> None: ...
    def on_train_start(self, trainer, pl_module) -> None: ...
    def on_train_end(self, trainer, pl_module) -> None: ...
    def on_test_end(self, trainer, pl_module) -> None: ...

def patched_fit(original, self, *args, **kwargs): ...
