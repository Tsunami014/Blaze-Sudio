import abc
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod

class FlavorBackend(metaclass=abc.ABCMeta):
    __metaclass__ = ABCMeta
    def __init__(self, config, **kwargs) -> None: ...
    @abstractmethod
    def predict(self, model_uri, input_path, output_path, content_type, json_format): ...
    @abstractmethod
    def serve(self, model_uri, port, host, timeout, enable_mlserver, synchronous: bool = True, stdout: Incomplete | None = None, stderr: Incomplete | None = None): ...
    def prepare_env(self, model_uri, capture_output: bool = False) -> None: ...
    @abstractmethod
    def build_image(self, model_uri, image_name, install_mlflow, mlflow_home, enable_mlserver): ...
    @abstractmethod
    def generate_dockerfile(self, model_uri, output_path, install_mlflow, mlflow_home, enable_mlserver): ...
    @abstractmethod
    def can_score_model(self): ...
    def can_build_image(self): ...
