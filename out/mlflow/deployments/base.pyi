import abc
from _typeshed import Incomplete
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.utils.annotations import experimental as experimental

def run_local(target, name, model_uri, flavor: Incomplete | None = None, config: Incomplete | None = None) -> None: ...
def target_help() -> None: ...

class BaseDeploymentClient(abc.ABC, metaclass=abc.ABCMeta):
    target_uri: Incomplete
    def __init__(self, target_uri) -> None: ...
    @abc.abstractmethod
    def create_deployment(self, name, model_uri, flavor: Incomplete | None = None, config: Incomplete | None = None, endpoint: Incomplete | None = None): ...
    @abc.abstractmethod
    def update_deployment(self, name, model_uri: Incomplete | None = None, flavor: Incomplete | None = None, config: Incomplete | None = None, endpoint: Incomplete | None = None): ...
    @abc.abstractmethod
    def delete_deployment(self, name, config: Incomplete | None = None, endpoint: Incomplete | None = None): ...
    @abc.abstractmethod
    def list_deployments(self, endpoint: Incomplete | None = None): ...
    @abc.abstractmethod
    def get_deployment(self, name, endpoint: Incomplete | None = None): ...
    @abc.abstractmethod
    def predict(self, deployment_name: Incomplete | None = None, df: Incomplete | None = None, endpoint: Incomplete | None = None): ...
    def explain(self, deployment_name: Incomplete | None = None, df: Incomplete | None = None, endpoint: Incomplete | None = None) -> None: ...
    def create_endpoint(self, name, config: Incomplete | None = None) -> None: ...
    def update_endpoint(self, endpoint, config: Incomplete | None = None) -> None: ...
    def delete_endpoint(self, endpoint) -> None: ...
    def list_endpoints(self) -> None: ...
    def get_endpoint(self, endpoint) -> None: ...
