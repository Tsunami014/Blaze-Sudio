from _typeshed import Incomplete
from mlflow import mleap as mleap, pyfunc as pyfunc
from mlflow.deployments import BaseDeploymentClient as BaseDeploymentClient
from mlflow.exceptions import MlflowException as MlflowException
from mlflow.models import Model as Model
from mlflow.models.container import DEPLOYMENT_CONFIG_KEY_FLAVOR_NAME as DEPLOYMENT_CONFIG_KEY_FLAVOR_NAME, SERVING_ENVIRONMENT as SERVING_ENVIRONMENT
from mlflow.models.model import MLMODEL_FILE_NAME as MLMODEL_FILE_NAME
from mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE as INVALID_PARAMETER_VALUE, RESOURCE_DOES_NOT_EXIST as RESOURCE_DOES_NOT_EXIST
from mlflow.utils import get_unique_resource_id as get_unique_resource_id
from mlflow.utils.annotations import deprecated as deprecated, experimental as experimental
from mlflow.utils.file_utils import TempDir as TempDir

DEFAULT_IMAGE_NAME: str
DEPLOYMENT_MODE_ADD: str
DEPLOYMENT_MODE_REPLACE: str
DEPLOYMENT_MODE_CREATE: str
DEPLOYMENT_MODES: Incomplete
IMAGE_NAME_ENV_VAR: str
DEPRECATED_IMAGE_NAME_ENV_VAR: str
DEFAULT_BUCKET_NAME_PREFIX: str
DEFAULT_SAGEMAKER_INSTANCE_TYPE: str
DEFAULT_SAGEMAKER_INSTANCE_COUNT: int
DEFAULT_REGION_NAME: str
SAGEMAKER_SERVING_ENVIRONMENT: str

def push_image_to_ecr(image=...) -> None: ...
def deploy(app_name, model_uri, execution_role_arn: Incomplete | None = None, assume_role_arn: Incomplete | None = None, bucket: Incomplete | None = None, image_url: Incomplete | None = None, region_name: str = 'us-west-2', mode=..., archive: bool = False, instance_type=..., instance_count=..., vpc_config: Incomplete | None = None, flavor: Incomplete | None = None, synchronous: bool = True, timeout_seconds: int = 1200, data_capture_config: Incomplete | None = None, variant_name: Incomplete | None = None): ...
def delete(app_name, region_name: str = 'us-west-2', assume_role_arn: Incomplete | None = None, archive: bool = False, synchronous: bool = True, timeout_seconds: int = 300): ...
def deploy_transform_job(job_name, model_uri, s3_input_data_type, s3_input_uri, content_type, s3_output_path, compression_type: str = 'None', split_type: str = 'Line', accept: str = 'text/csv', assemble_with: str = 'Line', input_filter: str = '$', output_filter: str = '$', join_resource: str = 'None', execution_role_arn: Incomplete | None = None, assume_role_arn: Incomplete | None = None, bucket: Incomplete | None = None, image_url: Incomplete | None = None, region_name: str = 'us-west-2', instance_type=..., instance_count=..., vpc_config: Incomplete | None = None, flavor: Incomplete | None = None, archive: bool = False, synchronous: bool = True, timeout_seconds: int = 1200) -> None: ...
def terminate_transform_job(job_name, region_name: str = 'us-west-2', assume_role_arn: Incomplete | None = None, archive: bool = False, synchronous: bool = True, timeout_seconds: int = 300): ...
def push_model_to_sagemaker(model_name, model_uri, execution_role_arn: Incomplete | None = None, assume_role_arn: Incomplete | None = None, bucket: Incomplete | None = None, image_url: Incomplete | None = None, region_name: str = 'us-west-2', vpc_config: Incomplete | None = None, flavor: Incomplete | None = None) -> None: ...
def run_local(model_uri, port: int = 5000, image=..., flavor: Incomplete | None = None) -> None: ...
def target_help(): ...

class SageMakerDeploymentClient(BaseDeploymentClient):
    region_name: Incomplete
    assumed_role_arn: Incomplete
    def __init__(self, target_uri) -> None: ...
    def create_deployment(self, name, model_uri, flavor: Incomplete | None = None, config: Incomplete | None = None, endpoint: Incomplete | None = None): ...
    def update_deployment(self, name, model_uri: Incomplete | None = None, flavor: Incomplete | None = None, config: Incomplete | None = None, endpoint: Incomplete | None = None): ...
    def delete_deployment(self, name, config: Incomplete | None = None, endpoint: Incomplete | None = None) -> None: ...
    def list_deployments(self, endpoint: Incomplete | None = None): ...
    def get_deployment(self, name, endpoint: Incomplete | None = None): ...
    def predict(self, deployment_name: Incomplete | None = None, df: Incomplete | None = None, endpoint: Incomplete | None = None): ...
    def explain(self, deployment_name: Incomplete | None = None, df: Incomplete | None = None, endpoint: Incomplete | None = None) -> None: ...
    def create_endpoint(self, name, config: Incomplete | None = None) -> None: ...
    def update_endpoint(self, endpoint, config: Incomplete | None = None) -> None: ...
    def delete_endpoint(self, endpoint) -> None: ...
    def list_endpoints(self) -> None: ...
    def get_endpoint(self, endpoint) -> None: ...

class _SageMakerOperation:
    status_check_fn: Incomplete
    cleanup_fn: Incomplete
    start_time: Incomplete
    status: Incomplete
    cleaned_up: bool
    def __init__(self, status_check_fn, cleanup_fn) -> None: ...
    def await_completion(self, timeout_seconds): ...
    def clean_up(self) -> None: ...

class _SageMakerOperationStatus:
    STATE_SUCCEEDED: str
    STATE_FAILED: str
    STATE_IN_PROGRESS: str
    STATE_TIMED_OUT: str
    state: Incomplete
    message: Incomplete
    def __init__(self, state, message) -> None: ...
    @classmethod
    def in_progress(cls, message: Incomplete | None = None): ...
    @classmethod
    def timed_out(cls, duration_seconds): ...
    @classmethod
    def failed(cls, message): ...
    @classmethod
    def succeeded(cls, message): ...
