import numpy as np
from _typeshed import Incomplete
from enum import Enum
from mlflow.exceptions import MlflowException as MlflowException
from typing import Any

class DataType(Enum):
    def __new__(cls, value, numpy_type, spark_type, pandas_type: Incomplete | None = None): ...
    boolean = ...
    integer = ...
    long = ...
    float = ...
    double = ...
    string = ...
    binary = ...
    datetime = ...
    def to_numpy(self) -> np.dtype: ...
    def to_pandas(self) -> np.dtype: ...
    def to_spark(self): ...
    @classmethod
    def get_spark_types(cls): ...

class ColSpec:
    def __init__(self, type: DataType, name: str | None = None) -> None: ...
    @property
    def type(self) -> DataType: ...
    @property
    def name(self) -> str | None: ...
    def to_dict(self) -> dict[str, Any]: ...
    def __eq__(self, other) -> bool: ...

class TensorInfo:
    def __init__(self, dtype: np.dtype, shape: tuple | list) -> None: ...
    @property
    def dtype(self) -> np.dtype: ...
    @property
    def shape(self) -> tuple: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_json_dict(cls, **kwargs): ...

class TensorSpec:
    def __init__(self, type: np.dtype, shape: tuple | list, name: str | None = None) -> None: ...
    @property
    def type(self) -> np.dtype: ...
    @property
    def name(self) -> str | None: ...
    @property
    def shape(self) -> tuple: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_json_dict(cls, **kwargs): ...
    def __eq__(self, other) -> bool: ...

class Schema:
    def __init__(self, inputs: list[ColSpec | TensorSpec]) -> None: ...
    @property
    def inputs(self) -> list[ColSpec | TensorSpec]: ...
    def is_tensor_spec(self) -> bool: ...
    def input_names(self) -> list[str | int]: ...
    def has_input_names(self) -> bool: ...
    def input_types(self) -> list[DataType | np.dtype]: ...
    def numpy_types(self) -> list[np.dtype]: ...
    def pandas_types(self) -> list[np.dtype]: ...
    def as_spark_schema(self): ...
    def to_json(self) -> str: ...
    def to_dict(self) -> list[dict[str, Any]]: ...
    @classmethod
    def from_json(cls, json_str: str): ...
    def __eq__(self, other) -> bool: ...
