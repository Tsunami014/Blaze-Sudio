#!/bin/python3
import re, os
import sys, termios, tty
from threading import Thread
from time import sleep

txt = """
.s5SSSs.                                              .s5SSSs.                                    
      SS. .s        .s5SSSs.  .s5SSSSs. .s5SSSs.            SS. .s    s.  .s5SSSs.  s.  .s5SSSs.  
sS    S%S                 SS.       SSS       SS.     sS    `:;       SS.       SS. SS.       SS. 
SS    S%S sS        sS    S%S     sSSS  sS    `:;     SS        sS    S%S sS    S%S S%S sS    S%S 
SS .sSSS  SS        SSSs. S%S    sSS"   SSSs.         `:;;;;.   SS    S%S SS    S%S S%S SS    S%S 
SS    S%S SS        SS    S%S   sSS     SS                  ;;. SS    S%S SS    S%S S%S SS    S%S 
SS    `:; SS        SS    `:;  sSS      SS                  `:; SS    `:; SS    `:; `:; SS    `:; 
SS    ;,. SS    ;,. SS    ;,. sSS       SS    ;,.     .,;   ;,. SS    ;,. SS    ;,. ;,. SS    ;,. 
`:;;;;;:' `:;;;;;:' :;    ;:' `:;;;;;:' `:;;;;;:'     `:;;;;;:' `:;;;;;:' ;;;;;;;:' ;:' `:;;;;;:' 
""" # Font used: amcslash
txt = txt[1:-1]

txt = re.sub('([%]+)', '\033[34m\\1\033[0m', txt)
txt = re.sub('([5S]+)', '\033[94m\\1\033[0m', txt)
txt = re.sub('([s.]+)', '\033[96m\\1\033[0m', txt)
txt = re.sub('([`:"\']+)', '\033[92m\\1\033[0m', txt)
txt = re.sub('([;,]+)', '\033[32m\\1\033[0m', txt)

print(txt)
print()

def bracketulate(txt):
    return f'\033[93m[{txt}\033[93m]\033[0m'

txts = {
    'info': '\033[38;5;69m~',
    'error': '\033[38;5;160m-',
    'good': '\033[38;5;28m+',
    'warn': '\033[38;5;202;52;1m!',
    'mid': '\033[38;2;193;156;0m='
}

BTs = {
    i: bracketulate(txts[i])+' ' for i in txts
}

def highlight(txt):
    return '\033[38;5;172m' + txt + '\033[0m'

class Spinner:
    spins = ['|', '/', '-', '\\']

    @classmethod
    def spinning_cursor(cls):
        while 1:
            for cursor in cls.spins:
                yield bracketulate('\033[38;5;166m'+cursor)

    def __init__(self, txt, delay=0.1):
        self.txt = txt
        self.delay = delay
        self.running = False
        self.requestStop = False
        self.t = None

    def spinner_task(self):
        self.running = True
        spinner_generator = self.spinning_cursor()
        print()
        while not self.requestStop:
            print('\033[F' + self.txt + next(spinner_generator))
            sleep(self.delay)
        self.running = False

    def __enter__(self):
        self.requestStop = False
        self.started = False
        self.t = Thread(target=self.spinner_task, daemon=True).start()
        return self

    def __exit__(self, exception, value, tb):
        self.requestStop = True
        while self.running:
            pass

def options(title, opts, default=0):
    def getch():
        fd = sys.stdin.fileno()
        orig = termios.tcgetattr(fd)

        try:
            tty.setcbreak(fd)  # or tty.setraw(fd) if you prefer raw mode's behavior.
            return sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSAFLUSH, orig)
    
    prevchrs = 0
    opt = default

    def print_opts():
        print(f'{bracketulate('\033[38;5;166m?')} \033[92m{title}: \033[94m{opts[opt]}\033[0m'+' '*max(len(i) for i in opts))
        for i in range(len(opts)):
            t = opts[i]
            if i == opt:
                print(f'\033[94;1;3m>  {t}\033[0m')
            else:
                print(f'   {t}')
    print_opts()

    def update_opts():
        nonlocal prevchr
        prevchr = 0
        print(f'\033[{len(opts)+2}B', end='')
        print('\033[F'*(len(opts)+2))
        print_opts()
        print('\033[F'*(len(opts)-opt)+'\033[2C', end='')
    
    update_opts()
    
    while True:
        char = getch()
        if char == '\x1b':
            prevchr = 1
        elif char == '[' and prevchr == 1:
            prevchr = 2
        elif char == 'A' and prevchr == 2 and opt > 0:
            opt -= 1
            update_opts()
        elif char == 'B' and prevchr == 2 and opt < len(opts)-1:
            opt += 1
            update_opts()
        elif char == '5' and prevchr == 2:
            opt = 0
            update_opts()
        elif char == '6' and prevchr == 2:
            opt = len(opts)-1
            update_opts()
        elif char == '\n':
            print(f'\033[F\033[{len(opts)+2}B', end='')
            return opt

l = ['hi', 'hello', 'bye', 'goodbye']
chosen = options('What would you like to do?', l)
print('You chose: '+l[chosen])

with Spinner('Doing something '):
    sleep(5)

print('Done!')
